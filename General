/* Check if number is palindrome */
boolean isPalindrome(int number) {
	int originalNumber = number;
	int reversedNumber, reversedNumber = 0;

	while(number > 0) {
		digit = number % 10;
		number = number / 10;
		reversedNumber = reversedNumber * 10 + digit; 
	}

	if (reversedNumber != originalNumber) {
		return false;
	}

	return true;
 }

 /* Check if string is palindrome */
 boolean isPalindrome(String s) {
 	int startPos = 0;
 	int endPos = s.length() - 1;

 	while(startPost < endPos) {
 		String startLetter = s.substring(startPos, startPos + 1);
 		String endLetter = s.substring(endPos, endPos + 1);

 		if(!startLetter.equals(endLetter)) {
 			return false;
 		}

 		startPos++;
 		endPos--;
 	}

 	return true;
 }

 /* FizzBuzz - Output numbers from 1 to x. If the number is divisible by 3, replace it with "Fizz". If it is
    divisible 5, replace it with "Buzz". If it is divisible by 3 and 5 replace it with "FizzBuzz". */
public void FizzBuzz(int x) {
	for (int i = 1; i <= x; i++) {
		if(i % 3 == 0 && i % 5 == 0) {
			System.out.println("FizzBuzz");
		} else if (i % 3 == 0) {
			System.out.println("Fizz");
		} else if (i % 5 == 0) {
			System.out.println("Buzz");
		} else {
			System.out.println(i);
		}
	}
}

/* Making Change: Given an input x, write a function to determine the minimum numbe of coins required to make
   that exact amount of change */
public int change(int x, int[] coin) {
	int[] cache = new int[x];
	for(int i=0; i<x; i++) {
		cache[i] = -1;
	}
	return change(x, coins, cache);
}

public int change(int x, int[] coin, int[] cache) {
	if(x == 0) return 0;

	int min = x;
	for(int coin : coins) {
		if (x - coin >= 0) {
			int c;
			if (cache[x - coin] >= 0) c = cache[x - coin];
			else {
				c = change(x - coin, coins, cache);
				cache[x - coin] = c;
			}
			if(min > c + 1) min = c + 1;
		}
	}

	return min;
}

/* Design a stack with a push, pop and max function which returns the max value in the stack, all of which 
   are run in O(1) time */
public class MaxStack {
	private class Node {
		private int value;
		private Node next;
		private Node oldMax;
	}

	private Node stack;
	private Node max;

	public class MaxStack() {}

	public void push(int x) {
		Node n = new Node();
		n.value = x;

		if(stack == null) {
			stack = n;
		} else {
			n.next = stack;
			stack = n;
		}

		if(max == null || n.value > max.value) {
			n.oldMax = max;
			max = n;
		}
	}

	public int pop() {
		if(stack == null) throw new NullPointerException;

		Node n = stack;
		stack = n.next;
		if(n.oldMax != null) max = n.oldMax;

		return n.value;
	}

	public int max() {
		if(max == null) throw new NullPointerException;

		return max.value;
	}
}

/* Given two strings, write a function to determine whether they are anagrams. */
public boolean isAnagram(String s1, String s2) {
	if(s1.length() != s2.length()) return false;

	// Convert both to lower case if lower case and uppercase are the same 
	s1 = s1.toLowerCase();
	s2 = s2.toLowerCase();

	int[] letters = new int[256]; //ASCII 

	for(char c : s1.toCharArray()) {
		letters[c]++;
	}

	for(char c : s2.toCharArray()) {
		letters[c]--;
	}	

	for(int i : letters) {
		if(i != 0) return false;
	}

	return true;
}

/* Given a list of strings, write a function to find the kth most frequently recurring string */
public String kthMostFrequent(String[] strings, int k) {
	HashMap<String, Integer> map = new HashMap<String, Integer>();

	for(String s : strings) {
		Integer x = map.get(s);
		if(x == null) x = 0;
		map.put(s, ++x);
	}

	List<Map.Entry> list = new ArrayList(map.entrySet());

	Collection.sort(list, new Comparator(){
		public int compare(Object o1, Object o2) {
			Integer v1 = (Integer) ((Map.Entry) o1).getValue();
			Integer v2 = (Integer) ((Map.Entry) o2).getValue();
			return v1.compareTo(v2);
		}
	});

	if(list.size() > k) return (String) ((list.get(k)).getKey();
	return null;
}

/* Given a linked list, write a function that divides it into two halves. This function should modify the 
   original list and then return a pointer to the second half of the list. */
public Node divide(Node list) {
	if(list == null) return null;

	Node runner = list.next;

	while(runner != null) {
		runner = runner.next;
		if(runner == null) break;
		runner = runner.next;
		list = list.next;
	}

	Node nodeToReturn = list.next;
	list.next = null;

	return nodeToReturn;
}

/* Given a tree, write a function that prints out the nodes of the tree in level order */
private void traverse(Node tree) {
	if (tree == null) return null;

	LinkedList<Node> toVisit = new LinkedList<Node>();

	toVisit.add(tree);

	while(!toVisit.isEmpty()) {
		Node curr = toVisit.remove();
		System.out.println(curr.value());
		if(curr.left != null) toVisit.add(curr.left);
		if(curr.right != null) toVisit.add(curr.right);
	}
}

/* Given a linked list, write a function to determine whether the list is a palindrome */
public boolean palindrome(Node n) {
	Node curr = n;
	Node runner = n;
	Stack<Integer> stack = new Stack<Integer>();

	while(runner != null && runner.next != null) {
		stack.push(curr.value);
		curr = curr.next;
		runner = runner.next.next;
	}

	if(runner != null) curr = curr.next // for odd number of characters - skip middle

	while(curr != null) {
		if(stack.pop() != curr.value) return false;
		curr = curr.next;
	}

	return true;

}

/* Given a list of integers, write a function that returns all sets of 3 numbers in the list, a, b, c
   so that a + b + c = 0. */
public static ArrayList<int[]> threeSum(int[] arr) {
	ArrayList<int[]> results = new ArrayList<int[]>;

	Arrays.sort(arr); // Sort array 

	for(int i = 0; i < arr.length - 3; i++) {
		if(i == 0 || arr[i] > arr[i - 1]) {
			int start = i + 1;
			int end = arr.length - 1;

			while(start < end) {
				if(arr[i] + arr[start] + arr[end] == 0) {
					results.add(new int[] {arr[i], arr[start], arr[end]})
				}

				if(arr[i] + arr[start] + arr[end] < 0) {
					int currStart = start;
					while(arr[currStart] == arr[start] && start < end) {
						start++;
					}
				} else {
					int currEnd = end;
					while(arr[currEnd] == arr[end] && start < end) {
						end--;
					}
				}
			}
		}
	}

	return results;
}

/* Given an array, write a function to find any subarray that sums to zero, if one exists. */
public int[] zeroSum(int[] arr) {
	HashMap<Integer, Integer> sums = new HashMap<Integer, Integer>();

	int sum = 0;

	for(int i=0; i<=arr.length; i++) {
		Integer oldIndex = sums.get(sum);
		if(oldIndex == null && i == arr.length) {
			return null;
		} else if (oldIndex == null) {
			sums.put(sum, i);
			sum += arr[i];
		} else {
			return Arrays.copyOfRange(arr, oldIndex, i);
		}
 	}

 	return null;
}

/* Given 2 sorted arrays, A and B, where A is long enough to hold the contents of A and B, write
   a function to copy the contents of B into A without using any buffer or additional memory. */
public void mergeArray(int[] a, int[] b, int aLength, int bLength) {
	if(aLength + bLength > a.length) throw new Exception();

	int aIndex = aLength - 1;
	int bIndex = bLength - 1;
	int mergeIndex = aLength + bLength - 1;

	while(aIndex >= 0 && bIndex >= 0) {
		if(a[aIndex] > b[bIndex]) {
			a[mergeIndex] = a[aIndex];
			aIndex--;
		} else {
			a[mergeIndex] = b[bIndex];
			bIndex--;
		}

		mergeIndex--;
	}

	while(bIndex >= 0) {
		a[mergeIndex] = b[bIndex];
		bIndex--;
		mergeIndex--;
	}
}

/* Given a binary tree, write a function to determine whether the tree is balanced */
public boolean isBalanced(Node n) {
	if(balancedHeight(n) > -1) return true;
	return false;
}

public int balancedHeight(Node n) {
	if(n == null) return 0;
	int h1 = balancedHeight(n.left);
	int h2 = balancedHeight(n.right);

	if(h1 == -1 || h2 == -1) return -1;
	if(Math.abs(h1 > h2) > 1) return -1;

	if(h1 > h2) return h1 + 1;
	return h2 + 1;
}

/* Given two integers, determine whether or not they differ by a single bit */
public boolean isGray(int a, int b) {
	int x = a ^ b;
	while(x > 0) {
		if(x % 2 == 1 && x >> 1 > 0) return false;
		x = x >> 1;
	}

	return true;
}

/* Implement a stack with basic functionality (push and pop) using queues to store the data. */
public class Stack {
	private Queue<Integer> primary = new LinkedList<Integer>();
	private Queue<Integer> secondary = new LinkedList<Integer>();

	public Stack() {}

	public void push(int x) {
		secondary.add(x);
		while(!primary.isEmpty()) {
			seconday.add(primary.remove());
		}

		Queue<Integer> temp = primary;
		primary = secondary;
		secondary = temp;
	}

	public int pop() {
		if(primary.isEmpty()) throw new IndexOutOfBoundsException();
		return primary.remove();
	}
}

/* Given two strings, write a function that returns the longest common substring. */
public String longestSubString(String a, String b) {
	String out = "";
	if(a.length() == 0 || b.length() == 0) return out;

	int[][] cache = new int[a.length()][b.length()];

	for(int i=0; i<a.length(); i++) {
		for(int j=0; j<b.length(); j++) {
			if(a.charAt(i) == b.charAt(j)) {
				if(i == 0 || j == 0) {
					cache[i][j] = 1;
				} else {
					cache[i][j] = cache[i-1][j-1] + 1;
				}

				if(cache[i][j] > out.length()) {
					out = a.substring(i - cache[i][j] + 1, i + 1);
				}
			}
		}
	}

	return out;
}

/* Given a linked list, write a function that prints the nodes of the list in reverse order */
public void printReversedList(Node n) {
	if(n == null) return;
	printReversedList(n.next);
	System.out.println(n.value);
}

/* Given a stack, sort the elements in the stack using no more than one additional stack */
public Stack<Integer> sortStack(Stack<Integer> stack) {
	if(stack == null || stack.isEmpty()) return stack;

	Stack<Integer> newStack = new Stack<Integer>();
	newStack.push(stack.pop());

	while(!stack.isEmpty()) {
		int temp = stack.pop();
		while(!newStack.isEmpty() && temp > newStack.peek()) {
			stack.push(newStack.pop());
		}
		newStack.push(temp);
	}

	return newStack;
}

/* Get Fibonnaci (n is equal of sum of n-1 + n-2) */
public int fib(int n) {
    if (n == 0) return 0;
    // Initialize cache
    int[] cache = new int[n+1];
    cache[0] = 0;
    cache[1] = 1;
    // Fill cache iteratively
    for (int i = 2; i <= n; i++) {
        cache[i] = cache[i-1] + cache[i-2];
    }
    return cache[n];
}

//Same function but in JS
var yourself = {
    fibonacci : function(n) {
        if(n === 0) {
            return 0;
        }
        var cache = [];
        cache[0] = 0;
        cache[1] = 1;
        for(i=2; i<=n; i++) {
            cache[i] = cache[i-1] + cache[i-2];
        }
        
        return cache[n];
    }
};

/* Sum of two numbers in array */
public boolean arrayHasSum(int[] theArray, int sum) {
	HashSet<Integer> complementsSet = new HashSet<Integer>();

	for(int i=0; i<theArray.length; i++) {
		if(complementsSet.contains(theArray[i])) {
			return true;
		}
		complementsSet.add(sum - theArray[i]);
	}

	return false;
}