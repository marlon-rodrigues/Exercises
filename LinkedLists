/* QUESTION 2.1 - Remove duplicate values from linked list */
void deleteDups(LinkedListNode n) {
	HashSet<Integer> set = new HashSet<Integer>();
	LinkedListNode previous = null;
	while (n != null) {
		if(set.contains(n.data)) {
			previous.next = n.next;
		} else {
			set.add(n.data);
			previous = n;
		}
		n = n.next;
	}
}

/* QUESTION 2.2 - Return Kth to Last - Linked List size is unknown */
LinkedList nthToLast(LinkedListNode head, int k) {
	LinkedListNode p1 = head;
	LinkedListNode p2 = head;

	// Move p1 k nodes into the list 
	for(int i=0; i<k; i++) {
		if(p1 == null) return null;
		p1 = p1.next;
	}

	// Move them at the same pace. When p1 hits the end, p2 will be at the right element
	while(p1 != null) {
		p1 = p1.next;
		p2 = p2.next;
	}

	return p2;
}

/* QUESTION 2.3 - Delete middle node (any node but the first and last node, not necessarily the exact middle)
   having access only to that node 
   Note - this won't work if node is the last node */
   boolean deleteNode(LinkedListNode n) {
   	if(n == null || n.next == null) {
   		return false;
   	}
   	LinkedListNode next = n.next;
   	n.data = next.data;
   	n.next = next.next;
   	return true;
   }

   /* QUESTION 2.4  - You have 2 numbers represented by a linked list, where each node contains a single digit. 
   The digits are stored in reverse order, such that the 1's digit is at the head of the list. Write a function that
   adds the two numbers and returns the sum as a linked list */
   LinkedListNode addLists(LinkedListNode l1, LinkedListNode l2, int carry) {
   	if(l1 == null && l2 == null && carry = 0) {
   		return null;
   	}

   	LinkedListNode result = new LinkedListNode();
   	int value = carry;
   	if(l1 != null) {
   		value += l1.data;
   	}

   	if(l2 != null) {
   		value += l2.data;
   	}

   	result.data = value % 10; // second digit of number

   	if(l1 != null || l2 != null) {
   		LinkedListNode more = addLists(l1 == null ? null : l1.next,
   									   l2 == null ? null : l2.next,
   									   value >= 10 ? 1 : 0);

   		result.setNext(more);
   	}

   	return result;
   }

   // Another way to implement this is to go through both lists and get the values into a string.
   // Then, we sum up the string and create a new linked list looping through the result string.

   /* QUESTION 2.5 - Implement a function to check if a linked list is a palindrome */
   // Front half is the reverse of the second half (0 -> 1 -> 2 -> 1 -> 0)
   boolean isPalindrome(LinkedListNode head) {
   	LinkedListNode fast = head;
   	LinkedListNode slow = head;

   	Stack<Integer> stack = new Stack<Integer>();

   	// When fast runner (which is moving at 2x speed) reaches the end of the list, then we know
   	// we are at the middle with slow
   	while (fast != null && fast.next !== null) {
   		stack.push(slow.data);
   		slow = slow.next;
   		fast = fast.next.next;
   	}

   	// Has odd number of elements, so skip the middle element
   	if (fast != null) {
   		slow = slow.next;
   	}

   	while (slow != null) {
   		int top = stack.pop().intValue();

   		// If values are different, then it is not a palindrome
   		if(top != slow.data) {
   			return false;
   		}
   		slow = slow.next;
   	}

   	return true;
   }

/* QUESTION 2.7 - Given two (singly) linked lists, determine if the two lists interset. Return the intersecting node.
Note that the intersection is defined based on reference, not value. That is, if the kth node of the first linked list
is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting. */
LinkedListNode findIntersection(LinkedListNode list1, LinkedListNode list 2) {
	if(list1 == null || list2 == null) return null;

	// Get tail (it will be the same if the intersect) and sizes */
	Result result1 = getTailandSize(list1);
	Result result2 = getTailandSize(list2);

	// If tails are different, then there's no intersection */
	if(result1.tail != result2.tail) {
		return null;
	}

	// Set pointers to the start of each linked list
	LinkedListNode shorter = result1.size < result2.size ? list1 : list2;
	LinkedListNode longer = result1.size < result2.size ? list2 : list1;

	// Advance the pointer for the longer linked list by difference in lenghts
	longer = getKthNode(longer, Math.abs(result1.size - result2.size));

	// Move both pointers until you have a collision
	while(shorter != longer) {
		shorter = shorter.next;
		longer = longer.next;
	}

	// Return either one
	return longer;
} 

class Result {
	public LinkedListNode tail;
	public int size;
	public Result(LinkedListNode tail, int size) {
		this.tail = tail;
		this.size = size;
	}
}

Result getTailandSize(LinkedListNode list) {
	if(list == null) return null;

	int size = 1;
	LinkedListNode current = list;
	while(current.next != null) {
		size++;
		current = current.next;
	}

	return new Result(current, size);
}

LinkedListNode getKthNode(LinkedListNode head, int k) {
	LinkedListNode current = head;
	while(k > 0 && current != null) {
		current = current.next;
		k--;
	}

	return current;
}

/* QUESTION 2.8 - Given a circular (corrupted) linked list, implement an algorithm that returns the node at 
the beginning of the loop. */
LinkedListNode FindBeginning(LinkedListNode head) {
	LinkedListNode slow = head;
	LinkedListNode fast = head;

	// Find meeting point. This will be LOOP_SIZE - k steps into the linked list
	while(fast != null && fast.next != null) {
		slow = slow.next;
		fast = fast.next.next;
		if(slow == fast) { //collision
			break;
		}
	}

	// Error check - no meeting point, therefore no loop
	if(fast == null || fast.next == null) { 
		return null;
	}

	// Move slow to Head. Keep fast at meeting point. Each are k steps from the loop start. 
	// If they move at the same pace, they must meet at loop start.
	slow = head;
	while(slow != fast) {
		slow = slow.next;
		fast = fast.next;
	}

	// Both now point to the start of the loop
	return fast;
}